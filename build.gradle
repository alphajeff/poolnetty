/*
 * Copyright (c) 2014 R358 https://github.com/R358
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
 * associated documentation files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial
 * portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT
 * LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */



apply plugin: 'java'

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url 'http://jcenter.bintray.com' }
    }
    dependencies {
        classpath 'org.apache.commons:commons-io:1.3.2'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:0.4-SNAPSHOT'
    }
}





configurations {
    jacocoant
    jacoco
    antjunit
}

dependencies {
    jacoco 'org.jacoco:org.jacoco.agent:0.6.2.201302030002'
    jacocoant 'org.jacoco:org.jacoco.ant:0.6.2.201302030002'
    antjunit 'org.apache.ant:ant-junit:1.8.4'
}




allprojects {
    apply plugin: 'java'

    configurations {
        codeCoverage
    }

    repositories {
        mavenCentral()
        maven { url 'http://jcenter.bintray.com' }
    }




    dependencies {
        compile fileTree(dir: new File(rootDir, 'libs'), include: '*.jar')
        compile 'org.jacoco:org.jacoco.agent:0.6.2.201302030002'
        codeCoverage group: 'org.jacoco', name: 'org.jacoco.agent', version: '0.6.2.201302030002', classifier: 'runtime'
    }



    test {
        jvmArgs "-javaagent:${configurations.codeCoverage.singleFile}=destfile=${rootDir}/build/coverage/jacoco.exec,sessionid=HSServ,append=true",
                '-Djacoco=true',
                '-Xms128m',
                '-Xmx512m',
                '-XX:MaxPermSize=128m'
    }

    version = '0.1.0.Final'
    group = 'org.r358.poolnetty'


}



subprojects {
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'signing'
    apply plugin: 'maven-publish'
    apply plugin: 'bintray'



    repositories {
        mavenCentral();
        jcenter();

    }

    sourceCompatibility = 1.7
    targetCompatibility = 1.7

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    task sourcesJar(type: Jar) {
        from sourceSets.main.allSource
        classifier = 'sources'
    }

    dependencies {
        testCompile 'junit:junit:4.10'
        compile 'io.netty:netty-all:4.0.17.Final'
    }

    signing {
        sign configurations.archives
    }


    jar {
        manifest.attributes provider: 'gradle'
    }
    
     tasks.withType(Jar) {
        baseName = "$project.name"
    }

    artifacts {
        archives sourcesJar, javadocJar
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                if (plugins.hasPlugin('war')) {
                    from components.web
                } else {
                    from components.java
                }

                artifact sourcesJar {
                    classifier "sources"
                }

                artifact javadocJar {
                    classifier "javadoc"
                }
            }
        }
    }


    bintray {
        user = bintrayuser //this usually comes form gradle.properties file in ~/.gradle
        key = bintrayapikey //this usually comes form gradle.properties file in ~/.gradle
        publications = ['mavenJava'] // see publications closure
        pkg { //package will be created if does not exist
            repo = 'poolnetty'
//            userOrg = 'myorg' // an optional organization name when the repo belongs to one of the user's orgs
            name = 'org.r358.poolnetty'
            desc = 'Poolnetty'
            licenses = ['BSD']
            labels = []
        }
    }

}



project(':common') {
    dependencies {

    }

}

project(':intest') {
    dependencies {
        compile project(':common')
        compile project(':pool')
    }
}

project(':pool') {
    dependencies {
        compile project(':common')
    }

}


task coverage_report(dependsOn: 'org.r358.poolnetty.test') << {

    //
    // Get jacoco jar.
    //
    File jacocoJar = null;
    project(':common').configurations.compile.each { file ->
        if (file.name.indexOf('jacoco') > 0) {
            jacocoJar = file;
        }
    }

    File root = new File(projectDir, "build/coverage");

    root.mkdirs();

    File coverageReport = new File(root, "reports");

    //
    // Delete old reports.
    //
    if (coverageReport.exists()) {
        org.apache.commons.io.FileUtils.deleteDirectory(coverageReport);
    }

    coverageReport.mkdirs();

    ant.taskdef(name: "jacocoreport", classname: "org.jacoco.ant.ReportTask", classpath: configurations.jacocoant.asPath);

    ant {
        jacocoreport {
            executiondata {
                fileset(dir: "${rootDir}/build/coverage/") {
                    file(file: 'jacoco.exec')
                }
            }

            structure(name: rootProject.name) {

                classfiles {
                    fileset dir: "${rootDir}/common/build/classes/main"
                    fileset dir: "${rootDir}/pool/build/classes/main"
                }

                // this is for Windows
                sourcefiles(encoding: 'UTF8') {
                    fileset dir: "${rootDir}/common/src/main/java"
                    fileset dir: "${rootDir}/pool/src/main/java"
                }
            }

            xml destfile: "${coverageReport}/poolnetty.xml"
            html destdir: "${coverageReport}"
        }
    }

    //
    // Delete source file..
    //
    new File("{$rootDir}/build/coverage/jacoco.exe").delete();

    println("\r\nCoverage Report can be found in: \r\n" + coverageReport);

}


